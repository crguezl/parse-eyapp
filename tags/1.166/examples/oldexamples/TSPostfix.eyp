# File TSPostfix.eyp
%right  '='
%left   '-' '+'
%left   '*' '/'
%left   NEG

%{
  use Data::Dumper;
  $Data::Dumper::Indent = 1;
  $Data::Dumper::Deepcopy = 1;
  $Data::Dumper::Deparse = 1;
  use IO::Interactive qw(interactive);
%}

%defaultaction { 
  if (@_==3) {  # NUM and VAR: 3 = lhs, child, code
    $lhs->{t} = $_[1]->{attr};
    return 
  }
  if (@_==5) { # binary operations: 5 = lhs, left, operand, right, code
    $lhs->{t} = "$_[1]->{t} $_[3]->{t} $_[2]->{attr}";
    return  
  }
  die "Fatal Error. Unexpected input\n".Dumper(@_);
}

%metatree

%%
line: exp  { $lhs->{t} = $_[1]->{t} }
;

exp:        NUM             
        |   VAR              
        |   VAR '=' exp         
        |   exp '+' exp         
        |   exp '-' exp        
        |   exp '*' exp       
        |   exp '/' exp      
        |   '-' exp %prec NEG { $_[0]->{t} = "$_[2]->{t} NEG" }
        |   '(' exp ')' %begin { $_[2] }      
;

%%

sub _Error {
        exists $_[0]->YYData->{ERRMSG}
    and do {
        print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
    my($token)=$_[0]->YYCurval;

    my($what)= $token ? "input: '$token'" : "end of input";

    die "Syntax error near $what.\n";
}

my $x; # Used for input

sub _Lexer {
    my($parser)=shift;

    defined($x) or  return('',undef);

    $x =~ s/^\s+//;

    $x =~ s/^([0-9]+(?:\.[0-9]+)?)//   and return('NUM',$1);
    $x =~ s/^([A-Za-z][A-Za-z0-9_]*)// and return('VAR',$1);
    $x =~ s/^(.)//s                    and return($1,$1);
}

sub Run {
    my($self)=shift;
    print {interactive} "Write an expression: ";
    $x = <>;
    my $tree = $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error,
      #yydebug => 0xFF
    );

    $tree->translation_scheme;

    print Dumper($tree);
    print "Translation:\n$tree->{t}\n";
}

