#
# Meta.yp
# 
# Parse::Eyapp input grammar example.
#
# This file is PUBLIC DOMAIN 
#
#

%metatree

%left   '-' '+'
%left   '*' 
%left   NEG

%%
line:       %name EXP    exp '\n'           { print $_[1]->{n}."\n" }
;

exp:        %name NUM   NUM                 
              { 
                $_[0]->{n} = $_[1]->{attr} 
              }
        |   %name PLUS  exp.left { print "PLUS $left " } '+' exp.right         
              { 
                $_[0]->{n} = $left->{n} + $right->{n} 
              }
        |   %name TIMES exp.left '*' exp.right         
              { 
                $_[0]->{n} = $left->{n} * $right->{n} 
              }
        |   %name PAREN  '(' exp ')'        
              { 
                $_[0]->{n} = $_[2]->{n} 
              }
        |   exp '-' exp         
              { $_[0]->{n} = $_[1]->{n} - $_[3]->{n} }

        |   '-' $exp %prec NEG   
              { $_[0]->{n} = -$exp->{n} }
;

%%

sub _Error {
        exists $_[0]->YYData->{ERRMSG}
    and do {
        print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
    print "Syntax error.\n";
}

sub _Lexer {
    my($parser)=shift;

        $parser->YYData->{INPUT}
    or  $parser->YYData->{INPUT} = <STDIN>
    or  return('',undef);

    $parser->YYData->{INPUT}=~s/^[ \t]//;

    for ($parser->YYData->{INPUT}) {
        s/^([0-9]+(?:\.[0-9]+)?)//
                and return('NUM',$1);
        s/^([A-Za-z][A-Za-z0-9_]*)//
                and return('VAR',$1);
        s/^(.)//s
                and return($1,$1);
    }
}

sub Run {
    my($self)=shift;
    return $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error );
}

