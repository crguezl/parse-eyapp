# CalcSyntax.eyp
%right  '='
%left   '-' '+'
%left   '*' '/'
%left   NEG
%right  '^'

%%

input:  line *  { print "input -> line *\n" }
;

line:       
  '\n'         { print "line -> \\n\n" }
  | exp '\n'   { print "line -> exp \\n\n"}
;

exp:
    NUM                { print "exp -> NUM ($_[1])\n"; }
  | VAR                { print "exp -> VAR ($_[1])\n"; }        
  | VAR '=' exp        { print "exp -> VAR '=' exp\n"; }       
  | exp '+' exp        { print "exp -> exp '+' exp\n"; }      
  | exp '-' exp        { print "exp -> exp '-' exp\n"; }     
  | exp '*' exp        { print "exp -> exp '*' exp\n"; }         
  | exp '/' exp        { print "exp -> exp '/' exp\n"; }             
  | '-' exp %prec NEG  { print "exp -> '-' exp\n"; }     
  | exp '^' exp        { print "exp -> exp '^' exp\n"; }             
  | '(' exp ')'        { print "exp -> '(' exp ')'\n"; }             
;

%%

sub _Error {
        exists $_[0]->YYData->{ERRMSG}
    and do {
        print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
    print "Syntax error.\n";
}

my $input;

sub _Lexer {
    my($parser)=shift;

    # topicalize $input
    for ($input) {
      s/^[ \t]+//;      # skip whites
      return('',undef) unless $input;

      return('NUM',$1) if s{^([0-9]+(?:\.[0-9]+)?)}{};
      return('VAR',$1) if s/^([A-Za-z][A-Za-z0-9_]*)//;
      return($1,$1)    if s/^(.)//s;
    }
}

sub Run {
    my($self)=shift;

    $input = shift;
    return $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error );
}

