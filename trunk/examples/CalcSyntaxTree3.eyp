# CalcSyntaxTree.eyp
%semantic token '=' '-' '+' '*' '/' '^'
%right  '='
%left   '-' '+'
%left   '*' '/'
%left   NEG
%right  '^'

%tree

%{
sub TERMINAL::info {
  my $self = shift;

  $self->attr;
}

%}
%%

line:       
    %name EXP
    exp '\n'   
;

exp:
    %name NUM 
    NUM                
  | %name VAR
    VAR                
  | %name ASSIGN 
    VAR '=' exp        
  | %name PLUS
    exp '+' exp        
  | %name MINUS
    exp '-' exp        
  | %name TIMES
    exp '*' exp        
  | %name DIV
    exp '/' exp        
  | %name UMINUS
    '-' exp %prec NEG  
  | %name EXP
    exp '^' exp        
  | %name PAREN
   '(' exp ')'        
;

%%

sub _Error {
        exists $_[0]->YYData->{ERRMSG}
    and do {
        print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
    print "Syntax error.\n";
}

my $input;

sub _Lexer {
    my($parser)=shift;

     $input
    or  return('',undef);

    # topicalize $input
    for ($input) {
      s/^[ \t]//;      # skip whites
      return('NUM',$1) if s{^([0-9]+(?:\.[0-9]+)?)}{};
      return('VAR',$1) if s/^([A-Za-z][A-Za-z0-9_]*)//;
      return($1,$1)    if s/^(.)//s;
    }
}

sub Run {
    my($self)=shift;

    $input = shift;
    return $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error );
}

