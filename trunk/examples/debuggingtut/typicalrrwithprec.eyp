# There is still 1 sr and 1 rr conflicts here.
# This example illustrates the need to express EOI in the header section
# For a solution to the conflicts
# see  typicalrr.eyp and correcttypicalrr.eyp

%right LNUM
%right NUM 
%right ID 
%right ''

%tree bypass

%%
s:
      %name EMPTY
      /* empty */ %prec ''
    | %name WORDS
       s ws
    | %name NUMS
      s ns 
;

ns:
      %name EMPTYNUM
      /* empty */  %prec NUM
    | %name NUMS
      NUM ns 
;

ws:
      %name EMPTYID
      /* empty */ %prec LNUM
    |  %name IDS
       ID ws
;

%%

sub _Error {
  my $parser = shift;

  my ($token) = $parser->YYCurval;
  my ($what) = $token ? "input: '$token'" : "end of input";
  warn "Syntax error near $what\n";
}

my $input;

sub _Lexer {
  my $self = shift;
  
  for ($input) {
    s{^(\s*)}{};

    return ('',undef) unless $_;

    return ('NUM',$1) if s/^(\d+)//;
    return ('ID',$1) if s/^([a-zA-Z_]\w*)//;
  }
  return ('',undef);
}

sub Run {
  my $debug = shift || 0;
  $debug = 0x1F if $debug;

  $input = <STDIN>;

  my $self = __PACKAGE__->new();

  print $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error, yydebug => $debug,)->str."\n";
}

sub TERMINAL::info { $_[0]->{attr} }

Run(@ARGV) unless caller;

=head1  Typical example of Reduce-Reduce conflict

Compile it with:

   eyapp -b '' typicalrr.eyp

=cut

