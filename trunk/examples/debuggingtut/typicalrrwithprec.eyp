%{

=head1 SYNOPSIS

This example illustrates how to express the
end of input (EOI) in the header section: use ''.
I believe the fact that EOI can be involved in a 
conflict resolution has been overlooked.

It attempts to solve the conflict in 
C<typicalrr.eyp> by giving priority
only to the  'empty rules'. The result is a bit
strange. Warning: Don't look too much at it if you 
are new to LALR conflict resolution.

Compile it with 

            eyapp -b '' typicalrrwithprec.eyp

Execute it with:

   ./typicalrrwithprec.pm -t

Try inputs C<4 5>,  C<a b> and C<4 5 a b>.

Here is an example of execution:

  $ ./typicalrrwithprec.pm -t
  Try "4 5 a b 2 3" (press <CR><CTRL-D> to finish): 4 5 a b 2 3

  NUMLIST(
    WORDLIST(
      NUMLIST(
        EMPTY,
        NUMS(
          TERMINAL[4],
          NUMS(
            TERMINAL[5],
            EMPTYNUM
          )
        )
      ),
      IDS(
        TERMINAL[a],
        IDS(
          TERMINAL[b],
          EMPTYID
        )
      )
    ),
    NUMS(
      TERMINAL[2],
      NUMS(
        TERMINAL[3],
        EMPTYNUM
      )
    )
  )


=head1 SEE ALSO

see  typicalrr.eyp, correcttypicalrr.eyp and typicalrr_fixed.eyp

=cut

use base q{RRTail}; 

%}

%right LNUM
%right NUM 
%right ID 
%right '' # The string '' refers to the 'End of Input' token

%tree bypass

%%
s:
      %name EMPTY
      /* empty */ %prec ''
    | %name WORDLIST
       s ws
    | %name NUMLIST
       s ns
;

ns:
      %name EMPTYNUM
      /* empty */  %prec NUM
    | %name NUMS
      NUM ns 
;

ws:
      %name EMPTYID
      /* empty */ %prec LNUM
    |  %name IDS
       ID ws
;

%%

unless (caller()) {
  $Parse::Eyapp::Node::INDENT = 1;
  my $prompt = 'Try "4 5 a b 2 3" '.
               '(press <CR><CTRL-D> to finish): ';
  __PACKAGE__->main($prompt) 
}

