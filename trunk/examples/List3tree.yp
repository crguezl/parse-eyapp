%{
use Data::Dumper;
%}

%semantic token 'c' 'd'
%tree

%%
Start: (S { print $_[1]->str."\n"; $_[1]})* { print Dumper($_[1]) }
;
S:   %name S
     C %name LIST_OF_C + 'd' '\n'             
;
C: %name C
   'c'
;

%%

sub _Error {
        exists $_[0]->YYData->{ERRMSG}
    and do {
        print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
    print "Syntax error.\n";
}

sub _Lexer {
    my($parser)=shift;

        $parser->YYData->{INPUT}
    or  $parser->YYData->{INPUT} = <STDIN>
    or  return('',undef);

    $parser->YYData->{INPUT}=~s/^[ \t]//;

    for ($parser->YYData->{INPUT}) {
        s/^(.)//s and return($1,$1);
    }
}

sub Run {
    my($self)=shift;
    $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error 
      #, yydebug => 0x1F 
    );
}

#my($calc)=new Calc;
#$calc->Run;
