# CalcSyntaxDefault.eyp
%right  '='
%left   '-' '+'
%left   '*' '/'
%left   NEG
%right  '^'

%defaultaction {
  my $parser = shift;

  print $parser->YYLhs." --> ";
  my $i = 0;
  for ($parser->YYRightside) {
     print "$_";
     print "[$_[$i]]" if /NUM|VAR/;
     print " ";
     $i++;
  }
  print "\n";
}

%%

line : 
    /* empty */
  | exp '\n'
;

exp:
    NUM                
  | VAR                
  | VAR '=' exp        
  | exp '+' exp        
  | exp '-' exp        
  | exp '*' exp        
  | exp '/' exp        
  | '-' exp %prec NEG  
  | exp '^' exp        
  | '(' exp ')'        
;

%%

sub _Error {
        exists $_[0]->YYData->{ERRMSG}
    and do {
        print $_[0]->YYData->{ERRMSG};
        delete $_[0]->YYData->{ERRMSG};
        return;
    };
    print "Syntax error.\n";
}

my $input;

sub _Lexer {
    my($parser)=shift;


    # topicalize $input
    for ($input) {
      s/^[ \t]+//;      # skip whites
      return('',undef) unless $_;
      return('NUM',$1) if s{^([0-9]+(?:\.[0-9]+)?)}{};
      return('VAR',$1) if s/^([A-Za-z][A-Za-z0-9_]*)//;
      return($1,$1)    if s/^(.)//s;
    }
}

sub Run {
    my($self)=shift;

    $input = shift;
    return $self->YYParse( yylex => \&_Lexer, yyerror => \&_Error );
}

