0:	$start -> prog $end
1:	prog -> /* empty */
2:	prog -> prog decORexp_explorer stmt
3:	stmt -> expr ';'
4:	stmt -> decl
5:	expr -> ID decORexp
6:	expr -> NUM
7:	expr -> INT '(' expr ')'
8:	expr -> expr '+' expr
9:	expr -> expr '=' expr
10:	decl -> INT declarator ';'
11:	decl -> INT declarator '=' expr ';'
12:	declarator -> ID decORexp
13:	declarator -> '(' declarator ')'
14:	decORexp -> /* empty */
15:	decORexp_explorer -> /* empty */


0 => $start -> prog $end
1 => prog -> /* empty */
2 => prog -> prog decORexp_explorer stmt
3 => stmt -> expr ';'
4 => stmt -> decl
5 => expr -> ID decORexp
6 => expr -> NUM
7 => expr -> INT '(' expr ')'
8 => expr -> expr '+' expr
9 => expr -> expr '=' expr
10 => decl -> INT declarator ';'
11 => decl -> INT declarator '=' expr ';'
12 => declarator -> ID decORexp
13 => declarator -> '(' declarator ')'
14 => decORexp -> /* empty */
15 => decORexp_explorer -> /* empty */
State 0:

	$start -> . prog $end	(Rule 0)

	$default	reduce using rule 1 (prog)

	prog	go to state 1

State 1:

	$start -> prog . $end	(Rule 0)
	prog -> prog . decORexp_explorer stmt	(Rule 2)

	$end	shift, and go to state 2

	$default	reduce using rule 15 (decORexp_explorer)

	decORexp_explorer	go to state 3

State 2:

	$start -> prog $end .	(Rule 0)

	$default	accept

State 3:

	prog -> prog decORexp_explorer . stmt	(Rule 2)

	ID	shift, and go to state 5
	INT	shift, and go to state 9
	NUM	shift, and go to state 4

	stmt	go to state 6
	expr	go to state 8
	decl	go to state 7

State 4:

	expr -> NUM .	(Rule 6)

	$default	reduce using rule 6 (expr)

State 5:

	expr -> ID . decORexp	(Rule 5)

	$default	reduce using rule 14 (decORexp)

	decORexp	go to state 10

State 6:

	prog -> prog decORexp_explorer stmt .	(Rule 2)

	$default	reduce using rule 2 (prog)

State 7:

	stmt -> decl .	(Rule 4)

	$default	reduce using rule 4 (stmt)

State 8:

	stmt -> expr . ';'	(Rule 3)
	expr -> expr . '+' expr	(Rule 8)
	expr -> expr . '=' expr	(Rule 9)

	'+'	shift, and go to state 11
	';'	shift, and go to state 12
	'='	shift, and go to state 13

State 9:

	expr -> INT . '(' expr ')'	(Rule 7)
	decl -> INT . declarator ';'	(Rule 10)
	decl -> INT . declarator '=' expr ';'	(Rule 11)

	'('	shift, and go to state 15
	ID	shift, and go to state 14

	declarator	go to state 16

State 10:

	expr -> ID decORexp .	(Rule 5)

	$default	reduce using rule 5 (expr)

State 11:

	expr -> expr '+' . expr	(Rule 8)

	ID	shift, and go to state 5
	INT	shift, and go to state 18
	NUM	shift, and go to state 4

	expr	go to state 17

State 12:

	stmt -> expr ';' .	(Rule 3)

	$default	reduce using rule 3 (stmt)

State 13:

	expr -> expr '=' . expr	(Rule 9)

	ID	shift, and go to state 5
	INT	shift, and go to state 18
	NUM	shift, and go to state 4

	expr	go to state 19

State 14:

	declarator -> ID . decORexp	(Rule 12)

	$default	reduce using rule 14 (decORexp)

	decORexp	go to state 20

State 15:

	expr -> INT '(' . expr ')'	(Rule 7)
	declarator -> '(' . declarator ')'	(Rule 13)

	'('	shift, and go to state 22
	ID	shift, and go to state 21
	INT	shift, and go to state 18
	NUM	shift, and go to state 4

	expr	go to state 23
	declarator	go to state 24

State 16:

	decl -> INT declarator . ';'	(Rule 10)
	decl -> INT declarator . '=' expr ';'	(Rule 11)

	';'	shift, and go to state 25
	'='	shift, and go to state 26

State 17:

	expr -> expr . '+' expr	(Rule 8)
	expr -> expr '+' expr .	(Rule 8)
	expr -> expr . '=' expr	(Rule 9)

	$default	reduce using rule 8 (expr)

State 18:

	expr -> INT . '(' expr ')'	(Rule 7)

	'('	shift, and go to state 27

State 19:

	expr -> expr . '+' expr	(Rule 8)
	expr -> expr . '=' expr	(Rule 9)
	expr -> expr '=' expr .	(Rule 9)

	'+'	shift, and go to state 11
	'='	shift, and go to state 13

	$default	reduce using rule 9 (expr)

State 20:

	declarator -> ID decORexp .	(Rule 12)

	$default	reduce using rule 12 (declarator)

State 21:

	expr -> ID . decORexp	(Rule 5)
	declarator -> ID . decORexp	(Rule 12)

	$default	reduce using rule 14 (decORexp)

	decORexp	go to state 28

State 22:

	declarator -> '(' . declarator ')'	(Rule 13)

	'('	shift, and go to state 22
	ID	shift, and go to state 14

	declarator	go to state 24

State 23:

	expr -> INT '(' expr . ')'	(Rule 7)
	expr -> expr . '+' expr	(Rule 8)
	expr -> expr . '=' expr	(Rule 9)

	')'	shift, and go to state 29
	'+'	shift, and go to state 11
	'='	shift, and go to state 13

State 24:

	declarator -> '(' declarator . ')'	(Rule 13)

	')'	shift, and go to state 30

State 25:

	decl -> INT declarator ';' .	(Rule 10)

	$default	reduce using rule 10 (decl)

State 26:

	decl -> INT declarator '=' . expr ';'	(Rule 11)

	ID	shift, and go to state 5
	INT	shift, and go to state 18
	NUM	shift, and go to state 4

	expr	go to state 31

State 27:

	expr -> INT '(' . expr ')'	(Rule 7)

	ID	shift, and go to state 5
	INT	shift, and go to state 18
	NUM	shift, and go to state 4

	expr	go to state 23

State 28:

	expr -> ID decORexp .	(Rule 5)
	declarator -> ID decORexp .	(Rule 12)

	')'	[reduce using rule 12 (declarator)]
	$default	reduce using rule 5 (expr)

State 29:

	expr -> INT '(' expr ')' .	(Rule 7)

	$default	reduce using rule 7 (expr)

State 30:

	declarator -> '(' declarator ')' .	(Rule 13)

	$default	reduce using rule 13 (declarator)

State 31:

	expr -> expr . '+' expr	(Rule 8)
	expr -> expr . '=' expr	(Rule 9)
	decl -> INT declarator '=' expr . ';'	(Rule 11)

	'+'	shift, and go to state 11
	';'	shift, and go to state 32
	'='	shift, and go to state 13

State 32:

	decl -> INT declarator '=' expr ';' .	(Rule 11)

	$default	reduce using rule 11 (decl)


0 => 
	$default	reduce using rule 1 (prog)
	prog	go to state 1

1 => 
	$end	shift, and go to state 2
	$default	reduce using rule 15 (decORexp_explorer)
	decORexp_explorer	go to state 3

2 => 
	$default	accept

3 => 
	ID	shift, and go to state 5
	INT	shift, and go to state 9
	NUM	shift, and go to state 4
	stmt	go to state 6
	expr	go to state 8
	decl	go to state 7

4 => 
	$default	reduce using rule 6 (expr)

5 => 
	$default	reduce using rule 14 (decORexp)
	decORexp	go to state 10

6 => 
	$default	reduce using rule 2 (prog)

7 => 
	$default	reduce using rule 4 (stmt)

8 => 
	'+'	shift, and go to state 11
	';'	shift, and go to state 12
	'='	shift, and go to state 13

9 => 
	'('	shift, and go to state 15
	ID	shift, and go to state 14
	declarator	go to state 16

10 => 
	$default	reduce using rule 5 (expr)

11 => 
	ID	shift, and go to state 5
	INT	shift, and go to state 18
	NUM	shift, and go to state 4
	expr	go to state 17

12 => 
	$default	reduce using rule 3 (stmt)

13 => 
	ID	shift, and go to state 5
	INT	shift, and go to state 18
	NUM	shift, and go to state 4
	expr	go to state 19

14 => 
	$default	reduce using rule 14 (decORexp)
	decORexp	go to state 20

15 => 
	'('	shift, and go to state 22
	ID	shift, and go to state 21
	INT	shift, and go to state 18
	NUM	shift, and go to state 4
	expr	go to state 23
	declarator	go to state 24

16 => 
	';'	shift, and go to state 25
	'='	shift, and go to state 26

17 => 
	$default	reduce using rule 8 (expr)

18 => 
	'('	shift, and go to state 27

19 => 
	'+'	shift, and go to state 11
	'='	shift, and go to state 13
	$default	reduce using rule 9 (expr)

20 => 
	$default	reduce using rule 12 (declarator)

21 => 
	$default	reduce using rule 14 (decORexp)
	decORexp	go to state 28

22 => 
	'('	shift, and go to state 22
	ID	shift, and go to state 14
	declarator	go to state 24

23 => 
	')'	shift, and go to state 29
	'+'	shift, and go to state 11
	'='	shift, and go to state 13

24 => 
	')'	shift, and go to state 30

25 => 
	$default	reduce using rule 10 (decl)

26 => 
	ID	shift, and go to state 5
	INT	shift, and go to state 18
	NUM	shift, and go to state 4
	expr	go to state 31

27 => 
	ID	shift, and go to state 5
	INT	shift, and go to state 18
	NUM	shift, and go to state 4
	expr	go to state 23

28 => 
	')'	[reduce using rule 12 (declarator)]
	$default	reduce using rule 5 (expr)

29 => 
	$default	reduce using rule 7 (expr)

30 => 
	$default	reduce using rule 13 (declarator)

31 => 
	'+'	shift, and go to state 11
	';'	shift, and go to state 32
	'='	shift, and go to state 13

32 => 
	$default	reduce using rule 11 (decl)

